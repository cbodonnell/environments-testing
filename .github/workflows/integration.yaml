name: integration

on:
  workflow_run:
    workflows: ["build"]
    types:
      - completed

jobs:
  # comment on the PR with the url and commit sha for this action run so that it can be approved
  comment:
    runs-on: ubuntu-latest
    outputs:
      comment-id: ${{ steps.comment-id.outputs.comment-id }}
    steps:
      - name: Comment on PR
        id: comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.workflow_run.pull_requests[0].number }}
          body: |
            Integration workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Commit: ${{ github.event.workflow_run.head_sha }}
      - name: Output the comment-id
        id: comment-id
        run: echo "comment-id=${{ steps.comment.outputs.comment-id }}" >> $GITHUB_OUTPUT

  integration:
    runs-on: ubuntu-latest
    environment: my-environment
    steps:
      # This step checks the secrets available to the workflow
      - name: Check MY_SECRET
        run: |
          echo MY_SECRET is $MY_SECRET
          if [[ $MY_SECRET == *"environment"* ]]; then
            echo "This is the environment secret!"
          elif [[ $MY_SECRET == *"repository"* ]]; then
            echo "This is the repository secret!"
          else
            echo "This is not the environment or repository secret!"
          fi
        env:
          MY_SECRET: ${{ secrets.MY_SECRET }}
      - name: 'Download artifact'
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "my-artifact";
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/my-artifact.zip`, Buffer.from(download.data));
      - name: 'Unzip artifact'
        run: unzip my-artifact.zip
      - name: Do stuff with the artifact
        run: cat artifact.txt

  # update PR comment with whether the integration workflow passed or failed
  update-comment:
    runs-on: ubuntu-latest
    needs: [comment, integration]
    steps:
      - name: Update comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ needs.comment.outputs.comment-id }}
          body: |
            Integration workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Commit: ${{ github.event.workflow_run.head_sha }}
            Status: ${{ job.status }}